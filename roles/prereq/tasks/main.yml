---
- set_fact:
    ocp_url="{{ lookup('env', 'OCP_URL') }}"
    openshift_type="{{ lookup('env', 'OPENSHIFT_TYPE') }}"
    image_arch="{{ lookup('env', 'IMAGE_ARCH') }}"
    ocp_username="{{ lookup('env', 'OCP_USERNAME') }}"
    ocp_password="{{ lookup('env', 'OCP_PASSWORD') }}"
    project_cert_manage="{{ lookup('env', 'PROJECT_CERT_MANAGE') }}"
    project_license_service="{{ lookup('env', 'PROJECT_LICENSE_SERVICE') }}"
    project_scheduling_service="{{ lookup('env', 'PROJECT_SCHEDULING_SERVICE') }}"
    project_cpd_inst_operators="{{ lookup('env', 'PROJECT_CPD_INST_OPERATORS') }}"
    project_cpd_inst_operands="{{ lookup('env', 'PROJECT_CPD_INST_OPERANDS') }}"
    stg_class_block="{{ lookup('env', 'STG_CLASS_BLOCK') }}"
    stg_class_file="{{ lookup('env', 'STG_CLASS_FILE') }}"
    ibm_entitlement_key="{{ lookup('env', 'IBM_ENTITLEMENT_KEY') }}"
    version="{{ lookup('env', 'VERSION') }}"
    components="{{ lookup('env', 'COMPONENTS') }}"
- name: Check prereqs
  block:
    - name: Check OCP Version
      block:
        - name: Gather version of Openshift we are deployed to
          kubernetes.core.k8s_info:
            api_version: config.openshift.io/v1
            kind: ClusterVersion
          register: cv_list
        - name: Parse out OCP Version
          set_fact:
            ocp_version: "{{ cv_list.resources |
                                map(attribute='status.desired.version') |
                                first }}"
        - name: Verify version of Openshift for CP4D to install correctly
          ansible.builtin.assert:
            that:
              - ocp_version is version('4.12.0', '>=', version_type='semver')
    - name: Verify 'OCP_URL' environment variable exists
      ansible.builtin.assert:
        that:
        - ocp_url is defined and ocp_url | length > 1
        fail_msg: "'OCP_URL' must be defined in order to run the installation of CP4D"
        success_msg: "'OCP_URL' found: {{ ocp_url }}"
    - name: Verify 'OPENSHIFT_TYPE' environment variable exists
      ansible.builtin.assert:
        that:
          - openshift_type is defined and openshift_type | length > 1
        fail_msg: "'OPENSHIFT_TYPE' must be defined in order to run the installation of CP4D"
        success_msg: "'OPENSHIFT_TYPE' found: {{ openshift_type }}"
    - name: Verify 'IMAGE_ARCH' environment variable exists
      ansible.builtin.assert:
        that:
          - image_arch is defined and image_arch | length > 1
        fail_msg: "'IMAGE_ARCH' must be defined in order to run the installation of CP4D"
        success_msg: "'IMAGE_ARCH' found: {{ image_arch }}"
    - name: Verify 'OCP_USERNAME' environment variable exists
      ansible.builtin.assert:
        that:
          - ocp_username is defined and ocp_username | length > 1
        fail_msg: "'OCP_USERNAME' must be defined in order to run the installation of CP4D"
        success_msg: "'OCP_USERNAME' found: {{ ocp_username }}"
    - name: Verify 'OCP_PASSWORD' environment variable exists
      ansible.builtin.assert:
        that:
          - ocp_password is defined and ocp_password | length > 1
        fail_msg: "'OCP_PASSWORD' must be defined in order to run the installation of CP4D"
        success_msg: "'OCP_PASSWORD' found: {{ ocp_password }}"
    - name: Verify 'PROJECT_CERT_MANAGE' environment variable exists
      ansible.builtin.assert:
        that:
          - project_cert_manage is defined and project_cert_manage | length > 1
        fail_msg: "'PROJECT_CERT_MANAGE' must be defined in order to run the installation of CP4D"
        success_msg: "'PROJECT_CERT_MANAGE' found: {{ project_cert_manage }}"
    - name: Verify 'PROJECT_LICENSE_SERVICE' environment variable exists
      ansible.builtin.assert:
        that:
          - project_license_service is defined and project_license_service | length > 1
        fail_msg: "'PROJECT_LICENSE_SERVICE' must be defined in order to run the installation of CP4D"
        success_msg: "'PROJECT_LICENSE_SERVICE' found: {{ project_license_service }}"
    - name: Verify 'PROJECT_SCHEDULING_SERVICE' environment variable exists
      ansible.builtin.assert:
        that:
          - project_scheduling_service is defined and project_scheduling_service | length > 1
        fail_msg: "'PROJECT_SCHEDULING_SERVICE' must be defined in order to run the installation of CP4D"
        success_msg: "'PROJECT_SCHEDULING_SERVICE' found: {{ project_scheduling_service }}"
    - name: Verify 'PROJECT_CPD_INST_OPERATORS' environment variable exists
      ansible.builtin.assert:
        that:
          - project_cpd_inst_operators is defined and project_cpd_inst_operators | length > 1
        fail_msg: "'PROJECT_CPD_INST_OPERATORS' must be defined in order to run the installation of CP4D"
        success_msg: "'PROJECT_CPD_INST_OPERATORS' found: {{ project_cpd_inst_operators }}"
    - name: Verify 'PROJECT_CPD_INST_OPERANDS' environment variable exists
      ansible.builtin.assert:
        that:
          - project_cpd_inst_operands is defined and project_cpd_inst_operands | length > 1
        fail_msg: "'PROJECT_CPD_INST_OPERANDS' must be defined in order to run the installation of CP4D"
        success_msg: "'PROJECT_CPD_INST_OPERANDS' found: {{ project_cpd_inst_operands }}"
    - name: Verify 'STG_CLASS_BLOCK' environment variable exists
      ansible.builtin.assert:
        that:
          - stg_class_block is defined and stg_class_block | length > 1
        fail_msg: "'STG_CLASS_BLOCK' must be defined in order to run the installation of CP4D"
        success_msg: "'STG_CLASS_BLOCK' found: {{ stg_class_block }}"
    - name: Verify 'STG_CLASS_FILE' environment variable exists
      ansible.builtin.assert:
        that:
          - stg_class_file is defined and stg_class_file | length > 1
        fail_msg: "'STG_CLASS_FILE' must be defined in order to run the installation of CP4D"
        success_msg: "'STG_CLASS_FILE' found: {{ stg_class_file }}"
    - name: Verify 'IBM_ENTITLEMENT_KEY' environment variable exists
      ansible.builtin.assert:
        that:
          - ibm_entitlement_key is defined and ibm_entitlement_key | length > 1
        fail_msg: "'IBM_ENTITLEMENT_KEY' must be defined in order to run the installation of CP4D"
        success_msg: "'IBM_ENTITLEMENT_KEY' found: {{ ibm_entitlement_key }}"        
    - name: Verify 'VERSION' environment variable exists
      ansible.builtin.assert:
        that:
          - version is defined and version | length > 1
        fail_msg: "'VERSION' must be defined in order to run the installation of CP4D"
        success_msg: "'VERSION' found: {{ version }}"        
    - name: Verify 'COMPONENTS' environment variable exists
      ansible.builtin.assert:
        that:
          - components is defined and components | length > 1
        fail_msg: "'COMPONENTS' must be defined in order to run the installation of CP4D"
        success_msg: "'COMPONENTS' found: {{ components }}"        
        
        
        
        
        
        